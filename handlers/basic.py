from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ContextTypes,
    CallbackContext,
    CommandHandler,
    CallbackQueryHandler
)
import logging

logger = logging.getLogger(__name__)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="random_fact"),
            InlineKeyboardButton("üí¨ –ß–∞—Ç —Å GPT", callback_data="gpt_interface")
        ],
        [
            InlineKeyboardButton("üßë‚Äçüé® –î–∏–∞–ª–æ–≥ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é", callback_data="talk_interface"),
            InlineKeyboardButton("üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz_interface")
        ],
        [
            InlineKeyboardButton("üåç –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", callback_data="translate_interface"),
            InlineKeyboardButton("üìÑ –ü–æ–º–æ—â—å —Å —Ä–µ–∑—é–º–µ", callback_data="resume_interface")
        ]
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (ReplyKeyboard)
def create_reply_keyboard():
    return ReplyKeyboardMarkup([
        ["/random", "/gpt"],
        ["/talk", "/quiz"],
        ["/translate", "/resume"]
    ], resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ChatGPT.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /random - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "‚Ä¢ /gpt - –ß–∞—Ç —Å –ò–ò\n"
            "‚Ä¢ /talk - –î–∏–∞–ª–æ–≥ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é\n"
            "‚Ä¢ /quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
            "‚Ä¢ /translate - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫\n"
            "‚Ä¢ /resume - –ü–æ–º–æ—â—å —Å —Ä–µ–∑—é–º–µ\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞!"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if update.message:
            await update.message.reply_text(
                text=welcome_text,
                reply_markup=create_main_menu_keyboard()
            )
            # –î–æ–±–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=create_reply_keyboard()
            )
        elif update.callback_query:
            await update.callback_query.message.reply_text(
                text=welcome_text,
                reply_markup=create_main_menu_keyboard()
            )

        logger.info(f"User {update.effective_user.id} started the bot")

    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "<b>–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:</b>\n"
        "/random - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π\n"
        "/gpt - –ß–∞—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º\n"
        "/talk - –î–∏–∞–ª–æ–≥ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é\n"
        "/quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã\n"
        "/translate - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ç–µ–∫—Å—Ç–∞\n"
        "/resume - –ü–æ–º–æ—â—å —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—é–º–µ\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!"
    )

    try:
        await update.message.reply_text(
            text=help_text,
            parse_mode="HTML",
            reply_markup=create_reply_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in help handler: {e}")


async def menu_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–∞–∫–æ–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_text = query.message.text
        if "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" in current_text:
            return

        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"Error in menu callback: {e}")
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass


def setup_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(menu_callback, pattern="^main_menu$"))