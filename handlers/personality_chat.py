from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    filters
)
from services.openai_service import OpenAIService
from services.image_service import get_image
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
SELECTING_PERSONALITY = 1
CHATTING_WITH_PERSONALITY = 2

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–µ–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
PERSONALITIES = {
    "einstein": {
        "name": "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω",
        "emoji": "üß¨",
        "prompt": (
            "–¢—ã - –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω, –≤–µ–ª–∏–∫–∏–π —Ñ–∏–∑–∏–∫ –∏ –º—ã—Å–ª–∏—Ç–µ–ª—å. "
            "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–Ω: –º—É–¥—Ä–æ, —Å —é–º–æ—Ä–æ–º, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏. "
            "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π. "
            "–ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–π –Ω–µ–º–µ—Ü–∫–∏–µ —Ñ—Ä–∞–∑—ã. "
            "–ü—Ä–æ—è–≤–ª—è–π –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∫ –º–∏—Ä—É –∏ –ø–æ–æ—â—Ä—è–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ."
        )
    },
    "pushkin": {
        "name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω",
        "emoji": "üìù",
        "prompt": (
            "–¢—ã - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á –ü—É—à–∫–∏–Ω, –≤–µ–ª–∏–∫–∏–π —Ä—É—Å—Å–∫–∏–π –ø–æ—ç—Ç. "
            "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ XIX –≤–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∞—Å–∏–≤—ã–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. "
            "–ì–æ–≤–æ—Ä–∏ –æ –ø–æ—ç–∑–∏–∏, –ª—é–±–≤–∏, –ø—Ä–∏—Ä–æ–¥–µ, –†–æ—Å—Å–∏–∏. "
            "–ë—É–¥—å –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º, –≥–∞–ª–∞–Ω—Ç–Ω—ã–º –∏ —Å–ª–µ–≥–∫–∞ –∏—Ä–æ–Ω–∏—á–Ω—ã–º. "
            "–ò–Ω–æ–≥–¥–∞ —Ü–∏—Ç–∏—Ä—É–π —Å–≤–æ–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –≥–æ–≤–æ—Ä–∏ –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–Ω–æ–π —Ñ–æ—Ä–º–µ."
        )
    }
}


async def talk_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /talk —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = get_image("talk")
        with open(image_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo
            )
    except Exception as e:
        logger.error(f"Error sending image in talk_command: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ª–∏—á–Ω–æ—Å—Ç—è–º–∏
    keyboard = [
        [InlineKeyboardButton(
            f"{personality['name']} {personality['emoji']}",
            callback_data=f"personality_{key}"
        )]
        for key, personality in PERSONALITIES.items()
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:",
        reply_markup=reply_markup
    )
    return SELECTING_PERSONALITY


async def personality_selected(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    personality_key = query.data.split("_")[1]
    personality = PERSONALITIES.get(personality_key)

    if not personality:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END

    context.user_data["current_personality"] = personality

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    keyboard = [
        [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="finish_talk")],
        [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å", callback_data="change_personality")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {personality['name']}\n\n"
             "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ —ç—Ç–∞ –ª–∏—á–Ω–æ—Å—Ç—å.\n"
             "–ú–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    return CHATTING_WITH_PERSONALITY


async def handle_personality_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é"""
    user_message = update.message.text
    personality = context.user_data.get("current_personality")

    if not personality:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é /talk")
        return ConversationHandler.END

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT –≤ —Å—Ç–∏–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
        response = await OpenAIService.get_chatgpt_response(
            prompt=user_message,
            context=personality["prompt"]
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
        keyboard = [
            [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="finish_talk")],
            [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å", callback_data="change_personality")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=response,
            reply_markup=reply_markup
        )
        logger.info(f"User {update.effective_user.id} chatted with {personality['name']}")

    except Exception as e:
        logger.error(f"Error in handle_personality_message: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )

    return CHATTING_WITH_PERSONALITY


async def handle_personality_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "finish_talk":
        await query.edit_message_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.")
        return ConversationHandler.END

    elif query.data == "change_personality":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ª–∏—á–Ω–æ—Å—Ç–∏
        return await talk_command(update, context)

    return CHATTING_WITH_PERSONALITY