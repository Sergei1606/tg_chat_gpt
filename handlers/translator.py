from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ContextTypes,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    filters
)
from services.openai_service import OpenAIService
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
SELECTING_LANGUAGE = 1
WAITING_FOR_TEXT = 2

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
LANGUAGES = {
    "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß",
    "ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
    "et": "–≠—Å—Ç–æ–Ω—Å–∫–∏–π üá™üá™"
}


async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"lang_{code}")]
        for code, name in LANGUAGES.items()
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        reply_markup=reply_markup
    )
    return SELECTING_LANGUAGE


async def language_selected(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç "lang_en")
    lang_code = query.data.split("_")[1]

    if lang_code not in LANGUAGES:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞")
        return ConversationHandler.END

    context.user_data["target_language"] = lang_code

    await query.edit_message_text(
        text=f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {LANGUAGES[lang_code]}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:"
    )
    return WAITING_FOR_TEXT


async def handle_translation_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    text_to_translate = update.message.text
    target_lang = context.user_data.get("target_language")

    if not target_lang:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /translate")
        return ConversationHandler.END

    try:
        prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ {LANGUAGES[target_lang]}: {text_to_translate}"
        translation = await OpenAIService.get_chatgpt_response(prompt)

        keyboard = [
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_lang")],
            [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            translation,
            reply_markup=reply_markup
        )
        logger.info(f"Translated text for user {update.effective_user.id}")

    except Exception as e:
        logger.error(f"Error in translation: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")

    return WAITING_FOR_TEXT


async def change_language(update: Update, context: CallbackContext):
    """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    return await translate_command(update, context)