from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    filters
)
from services.openai_service import OpenAIService
from services.image_service import get_image
import logging
import re

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
SELECTING_TOPIC = 1
ANSWERING_QUESTION = 2

# –¢–µ–º—ã –¥–ª—è –∫–≤–∏–∑–∞
QUIZ_TOPICS = {
    "geography": {
        "name": "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "emoji": "üåç",
        "prompt": """–¢—ã —Å–æ–∑–¥–∞–µ—à—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏.
–°–æ–∑–¥–∞–π –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (A, B, C, D).
–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ.
–§–æ—Ä–º–∞—Ç:
–í–æ–ø—Ä–æ—Å: [—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å]
A) [–≤–∞—Ä–∏–∞–Ω—Ç 1]
B) [–≤–∞—Ä–∏–∞–Ω—Ç 2]
C) [–≤–∞—Ä–∏–∞–Ω—Ç 3]
D) [–≤–∞—Ä–∏–∞–Ω—Ç 4]
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [–±—É–∫–≤–∞]"""
    },
    "history": {
        "name": "üèõ –ò—Å—Ç–æ—Ä–∏—è",
        "emoji": "üèõ",
        "prompt": """–°–æ–∑–¥–∞–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.
–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ.
–§–æ—Ä–º–∞—Ç:
–í–æ–ø—Ä–æ—Å: [—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å]
A) [–≤–∞—Ä–∏–∞–Ω—Ç 1]
B) [–≤–∞—Ä–∏–∞–Ω—Ç 2]
C) [–≤–∞—Ä–∏–∞–Ω—Ç 3]
D) [–≤–∞—Ä–∏–∞–Ω—Ç 4]
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [–±—É–∫–≤–∞]"""
    }
}


async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = get_image("quiz")
        with open(image_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo
            )
    except Exception as e:
        logger.error(f"Error sending image in quiz_command: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–∞
    context.user_data["quiz_score"] = 0

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(
            f"{topic['name']} {topic['emoji']}",
            callback_data=f"quiz_topic_{key}"
        )]
        for key, topic in QUIZ_TOPICS.items()
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:",
        reply_markup=reply_markup
    )
    return SELECTING_TOPIC


async def topic_selected(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    query = update.callback_query
    await query.answer()

    topic_key = query.data.split("_")[2]
    topic = QUIZ_TOPICS.get(topic_key)

    if not topic:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END

    context.user_data["current_topic"] = topic
    context.user_data["current_topic_key"] = topic_key

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —É ChatGPT
    await ask_new_question(update, context)
    return ANSWERING_QUESTION


async def ask_new_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback query
        if update.message:
            chat_id = update.message.chat.id
            reply_method = update.message.reply_text
        else:
            query = update.callback_query
            await query.answer()
            chat_id = query.message.chat.id
            reply_method = context.bot.send_message

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...

    except Exception as e:
        logger.error(f"Error in ask_new_question: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."
        )
        return ConversationHandler.END


async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_answer = update.message.text.upper()
    correct_answer = context.user_data.get("correct_answer", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer == correct_answer:
        context.user_data["quiz_score"] += 1
        result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ"
    else:
        result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
    score = context.user_data["quiz_score"]
    result_text += f"\n\n–í–∞—à —Å—á–µ—Ç: {score}"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å",
                                 callback_data=f"quiz_next_{context.user_data['current_topic_key']}"),
            InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="quiz_change_topic")
        ],
        [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="quiz_finish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=result_text,
        reply_markup=reply_markup
    )
    return ANSWERING_QUESTION


async def handle_quiz_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()

    if query.data == "quiz_finish":
        score = context.user_data.get("quiz_score", 0)
        await query.edit_message_text(
            f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {score}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )
        return ConversationHandler.END

    elif query.data.startswith("quiz_next_"):
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
        return await ask_new_question(update, context)

    elif query.data == "quiz_change_topic":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã
        return await quiz_command(update, context)

    return ANSWERING_QUESTION